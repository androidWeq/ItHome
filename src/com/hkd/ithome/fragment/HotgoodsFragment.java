package com.hkd.ithome.fragment;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.List;import me.maxwin.view.XListView;import me.maxwin.view.XListView.IXListViewListener;import com.example.ithome.R;import com.google.gson.Gson;import com.google.gson.JsonArray;import com.google.gson.JsonElement;import com.google.gson.JsonParser;import com.hkd.ithome.activities.LaPinDetial;import com.hkd.ithome.activities.LaPinShopCar;import com.hkd.ithome.activities.Me_Login;import com.hkd.ithome.adapter.HotGoodsListViewAdapter;import com.hkd.ithome.adapter.LaPinViewPagerAdapter;import com.hkd.ithome.app.AppApplication;import com.hkd.ithome.bean.GoodInfo;import com.hkd.ithome.tools.NoChange;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;import com.lidroid.xutils.view.annotation.ViewInject;import android.content.Context;import android.content.Intent;import android.opengl.Visibility;import android.os.Bundle;import android.os.Handler;import android.support.v4.app.Fragment;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.util.TypedValue;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.View.OnClickListener;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.view.animation.RotateAnimation;import android.widget.AdapterView;import android.widget.AdapterView.OnItemClickListener;import android.widget.ImageView;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.SimpleAdapter;import android.widget.TextView;public class HotgoodsFragment extends Fragment implements OnClickListener,		IXListViewListener, OnItemClickListener {	View view;	HttpUtils httpUtils;// xUtils的网络解析数据	ViewPager viewPager;// 辣品大的viewPager	RelativeLayout lapinLoadingContent;// 加载动画页面	ImageView lapinLoadingImg;// 加载旋转动画图片	XListView quanBuListView, baoPinListView;// viewPager的子页面里面的xlistview	ArrayList<View> viewPagers;// viewPager的子页面	LaPinViewPagerAdapter bigViewPagerAdapter, smallViewPagerAdapter;	private final static int QUANBU_VIEWPAGER = 0;// viewPager的全部子界面	private final static int BAOPIN_VIEWPAGER = 1;// viewPager的爆品子界面	List<GoodInfo> quanBuDatas, baopinDatas; // xlistView的模拟数据源	HotGoodsListViewAdapter adapterQuanbu, adapterBaopin;// xlistView的适配器	ArrayList<TextView> lapinTitleTxts;// 辣品title的样式	int indexCount = 0;// 记录当前在哪一个viewPager子界面,方便刷新该子界面的listview	int quanbuIndex = 1;// 全部页面listView的页码	int baopinIndex = 1;// 爆品页面listView的页码	int typeId = 3;// 数据源的类型	boolean isFirstToQuanBu = true;	boolean isFisrtToLaPin =true;	private Handler handler;	// listViewHead的组件	View listViewHeadView;	ViewPager quanBuListViewHeadViewPager;	TextView quanBuListViewHeadTitle;	ImageView quanBuListViewImg1, quanBuListViewImg2, quanBuListViewImg3;	ArrayList<View> smallViewPagerDatas;// 小viewPager的子界面集合	ArrayList<ImageView> quanBuListViewHeadImgs;// head头部切换图片小圆点的集合		ImageView toShopCar;//跳转到购物车界面	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		view = inflater.inflate(R.layout.fragment_hotgoods, null);		// ViewUtils.inject(this, view);		handler = new Handler();		initRotateAnimation();		init();		initViewPager();        		getListViewDatas(quanbuIndex);		setPageChange();		return view;	}	/**	 * 初始化适配器	 * 	 * @param datas	 * @param listview	 * @param adapter	 */	private void setadapter(int indexCount) {		switch (indexCount) {		case QUANBU_VIEWPAGER:			if (quanBuDatas == null) {				quanBuDatas = new ArrayList<GoodInfo>();				adapterQuanbu = new HotGoodsListViewAdapter(quanBuDatas,						getActivity());				//添加头部布局				quanBuListView.addHeaderView(listViewHeadView);				quanBuListView.setAdapter(adapterQuanbu);			}			break;		case BAOPIN_VIEWPAGER:			if (baopinDatas == null) {				baopinDatas = new ArrayList<GoodInfo>();				adapterBaopin = new HotGoodsListViewAdapter(baopinDatas,						getActivity());				baoPinListView.setAdapter(adapterBaopin);			}			break;		default:			break;		}	}    	/**	 * 从网络解析json填充到数据源	 * @param index  页码	 */	private void getListViewDatas(int index) {		httpUtils = new HttpUtils();		switch (indexCount) {		case QUANBU_VIEWPAGER:			typeId = 3;			break;		case BAOPIN_VIEWPAGER:			typeId = 4;			break;		default:						break;		}		RequestParams params = new RequestParams();		params.addQueryStringParameter("params", "{\"pageIndex\":\"" + index				+ "\",\"typeId\":\"" + typeId + "\"}");		httpUtils.send(HttpMethod.POST, NoChange.SELECT_GOODS, params,				new RequestCallBack<String>() {					public void onSuccess(ResponseInfo<String> responseInfo) {						String info = responseInfo.result;						// System.out.println(info+"--------");						Gson gson = new Gson();						List<GoodInfo> list = new ArrayList<GoodInfo>();						JsonParser jsonParser = new JsonParser();						JsonElement jsonElement = jsonParser.parse(info);// 将json字符串转换成JsonElement						JsonArray jsonArray;						try {							jsonArray = jsonElement.getAsJsonArray();							Iterator it = jsonArray.iterator();// Iterator处理							while (it.hasNext()) { // 循环								jsonElement = (JsonElement) it.next();// 提取JsonElement								String json = jsonElement.toString();// JsonElement转换成String								GoodInfo foodInfo = gson.fromJson(json,										GoodInfo.class);// String转化成JavaBean								list.add(foodInfo);// 加入List							}						} catch (Exception e) {							System.out.println("获得数据为空");							e.printStackTrace();						}																		setadapter(indexCount);						if (typeId == 3) {							for (GoodInfo goodInfo : list) {								quanBuDatas.add(goodInfo);							}							adapterQuanbu.notifyDataSetChanged();						} else if (typeId == 4) {							for (GoodInfo goodInfo : list) {								baopinDatas.add(goodInfo);							}							adapterBaopin.notifyDataSetChanged();						}						if (isFirstToQuanBu) {							// 取消动画							lapinLoadingImg.clearAnimation();							lapinLoadingContent.setVisibility(View.GONE);							isFirstToQuanBu=false;						}					}					@Override					public void onFailure(HttpException error, String msg) {						System.out.println("-----获取网络数据失败");					}				});	}	/**	 * 设置viewPager的滑动事件	 */	private void setPageChange() {		viewPager.setOnPageChangeListener(new OnPageChangeListener() {			// arg0 当前切换到的viewPager的页码			public void onPageSelected(int arg0) {				// 改变viewPager对应title字体样式				for (int i = 0; i < 2; i++) {					if (i == arg0) {						lapinTitleTxts.get(i).setTextColor(								getResources().getColor(R.color.red));						lapinTitleTxts.get(i).setTextSize(								TypedValue.COMPLEX_UNIT_PX,								getResources().getDimension(										R.dimen.lapin_toptxt_check_size));					} else {						lapinTitleTxts.get(i).setTextColor(								getResources().getColor(R.color.black));						lapinTitleTxts.get(i).setTextSize(								TypedValue.COMPLEX_UNIT_PX,								getResources().getDimension(										R.dimen.lapin_topTxt_normal_size));					}				}				switch (arg0) {				case QUANBU_VIEWPAGER:					// 记录当前切换到BigViewPage的页码					indexCount = QUANBU_VIEWPAGER;					break;				case BAOPIN_VIEWPAGER:					// 记录当前切换到BigViewPage的页码					indexCount = BAOPIN_VIEWPAGER;					if(isFisrtToLaPin){						getListViewDatas(baopinIndex);						isFisrtToLaPin=false;					}					break;				default:					break;				}			}			public void onPageScrolled(int arg0, float arg1, int arg2) {			}			public void onPageScrollStateChanged(int arg0) {			}		});		quanBuListViewHeadViewPager				.setOnPageChangeListener(new OnPageChangeListener() {					public void onPageSelected(int arg0) {						// head的小圆点图片集合,切换形式						for (int i = 0; i < quanBuListViewHeadImgs.size(); i++) {							if (i == arg0) {								quanBuListViewHeadImgs										.get(i)										.setImageDrawable(												getResources()														.getDrawable(																R.drawable.indicator_unactive_noimg));							} else {								quanBuListViewHeadImgs.get(i).setImageDrawable(										getResources().getDrawable(												R.drawable.indicator_unactive));							}						}						// headtextView的切换显示						switch (arg0) {						case 0:							quanBuListViewHeadTitle.setText("法撒旦发送飞飞鞍山发送飞啊");							break;						case 1:							quanBuListViewHeadTitle.setText("个人的人格省份啊 发二娃发二娃分");							break;						default:							quanBuListViewHeadTitle.setText(" 分公司的人工湖好v萨尔瓦分啊");							break;						}					}					@Override					public void onPageScrolled(int arg0, float arg1, int arg2) {						// TODO Auto-generated method stub					}					@Override					public void onPageScrollStateChanged(int arg0) {						// TODO Auto-generated method stub					}				});	}	/**	 * 加载动画的初始化	 */	private void initRotateAnimation() {		lapinLoadingContent = (RelativeLayout) view				.findViewById(R.id.lapin_loadingContent);		lapinLoadingImg = (ImageView) view				.findViewById(R.id.lapin_loadingContent_rotatingImg);		RotateAnimation rotateAnimation = (RotateAnimation) AnimationUtils				.loadAnimation(getActivity(), R.anim.rotating);		LinearInterpolator lin = new LinearInterpolator();// 设置为匀速转动		rotateAnimation.setInterpolator(lin);		lapinLoadingImg.startAnimation(rotateAnimation);	}	/**	 * fragment的切换显示与隐藏	 */	public void setMenuVisibility(boolean menuVisible) {		// TODO Auto-generated method stub		super.setMenuVisibility(menuVisible);		if (this.getView() != null)			this.getView()					.setVisibility(menuVisible ? View.VISIBLE : View.GONE);	}	/**	 * viewPager以及头部的绑定	 */	private void init() {		toShopCar=(ImageView) view.findViewById(R.id.lapin_toshopcar);		viewPager = (ViewPager) view.findViewById(R.id.lapin_big_viewpager);		lapinTitleTxts = new ArrayList<TextView>();		TextView titleTxt1 = (TextView) view				.findViewById(R.id.lapin_title_txt1);		TextView titleTxt2 = (TextView) view				.findViewById(R.id.lapin_title_txt2);		lapinTitleTxts.add(titleTxt1);		lapinTitleTxts.add(titleTxt2);		titleTxt1.setOnClickListener(this);		titleTxt2.setOnClickListener(this);		toShopCar.setOnClickListener(this);	}	/**	 * 大ViewPager的适配器	 */	private void initViewPager() {		if (viewPagers == null) {			viewPagers = new ArrayList<View>();		}		// viewPager子界面的获取		View quanBuViewPager = LayoutInflater.from(getActivity()).inflate(				R.layout.lapin_quanbu_viewpager, null);		View baoPinViewPager = LayoutInflater.from(getActivity()).inflate(				R.layout.lapin_baopin_viewpager, null);		// 子界面的xlistview的获取		quanBuListView = (XListView) quanBuViewPager				.findViewById(R.id.lapin_quanbu_viewpager_listview);		initListViewHead();		baoPinListView = (XListView) baoPinViewPager				.findViewById(R.id.lapin_baopin_viewpager_listview);		quanBuListView.setPullLoadEnable(true);		quanBuListView.setXListViewListener(this);		quanBuListView.setOnItemClickListener(this);		baoPinListView.setPullLoadEnable(true);		baoPinListView.setXListViewListener(this);		baoPinListView.setOnItemClickListener(this);		viewPagers.add(quanBuViewPager);		viewPagers.add(baoPinViewPager);		if (bigViewPagerAdapter == null) {			bigViewPagerAdapter = new LaPinViewPagerAdapter(getActivity(),					viewPagers);		}		viewPager.setAdapter(bigViewPagerAdapter);		viewPager.setCurrentItem(0);		// 第一次加载xListView需要的数据源	}	/**	 * listViewHead头部组件的绑定	 */	private void initListViewHead() {		listViewHeadView = LayoutInflater.from(getActivity()).inflate(				R.layout.lapin_quanbu_smallviewpager, null);		quanBuListViewHeadViewPager = (ViewPager) listViewHeadView				.findViewById(R.id.lapin_quanbu_listviewHead_viewpager);		quanBuListViewHeadTitle = (TextView) listViewHeadView				.findViewById(R.id.lapin_quanbu_listviewHead_title);		quanBuListViewImg1 = (ImageView) listViewHeadView				.findViewById(R.id.lapin_quanbu_listviewHead_img1);		quanBuListViewImg2 = (ImageView) listViewHeadView				.findViewById(R.id.lapin_quanbu_listviewHead_img2);		quanBuListViewImg3 = (ImageView) listViewHeadView				.findViewById(R.id.lapin_quanbu_listviewHead_img3);		quanBuListViewHeadImgs = new ArrayList<ImageView>();		quanBuListViewHeadImgs.add(quanBuListViewImg1);		quanBuListViewHeadImgs.add(quanBuListViewImg2);		quanBuListViewHeadImgs.add(quanBuListViewImg3);		// ��С��viewPager��ӽ���		View view1 = LayoutInflater.from(getActivity()).inflate(				R.layout.viewpager_item, null);		TextView txt1 = (TextView) view1.findViewById(R.id.viewpager_item_txt);		txt1.setText("界面一");		View view2 = LayoutInflater.from(getActivity()).inflate(				R.layout.viewpager_item, null);		TextView txt2 = (TextView) view2.findViewById(R.id.viewpager_item_txt);		txt2.setText("界面二");		View view3 = LayoutInflater.from(getActivity()).inflate(				R.layout.viewpager_item, null);		TextView txt3 = (TextView) view3.findViewById(R.id.viewpager_item_txt);		txt3.setText("界面三");		smallViewPagerDatas = new ArrayList<View>();		smallViewPagerDatas.add(view1);		smallViewPagerDatas.add(view2);		smallViewPagerDatas.add(view3);		if (smallViewPagerAdapter == null) {			smallViewPagerAdapter = new LaPinViewPagerAdapter(getActivity(),					smallViewPagerDatas);		}		// 绑定适配器		quanBuListViewHeadViewPager.setAdapter(smallViewPagerAdapter);		System.out.println("-----------head");		// 设置默认现实的额子界面		quanBuListViewHeadViewPager.setCurrentItem(0);	}	/**	 * 点击事件	 */	public void onClick(View v) {		switch (v.getId()) {		case R.id.lapin_title_txt1:			viewPager.setCurrentItem(0);			break;		case R.id.lapin_title_txt2:			viewPager.setCurrentItem(1);			break;		case R.id.lapin_toshopcar:			Intent intent;			if(AppApplication.getApp().getUsername()==null){				intent=new Intent(getActivity(),Me_Login.class);			}else{				intent=new Intent(getActivity(),LaPinShopCar.class);			}			startActivity(intent);		default:			break;		}	}	/**	 * listView的item的点击事件	 */	public void onItemClick(AdapterView<?> parent, View view, int position,			long id) {		GoodInfo info=new GoodInfo();		//根据不同的listview来获取不同的数据源        switch (parent.getId()) {        //全部商品的单个详细信息		case R.id.lapin_quanbu_viewpager_listview:			//当前点击的item-2是因为它有两个头部,一个是viewpager,一个是下拉刷新			info=quanBuDatas.get(position-2);						break;		//爆品页面的单个详细信息		case R.id.lapin_baopin_viewpager_listview:			//当前点击的item-1是因为它一个头部,下拉刷新			info=baopinDatas.get(position-1);			break;		default:			break;		}        //将goodInfo对象传递到详情页面        Intent intent=new Intent();		intent.setClass(getActivity(),LaPinDetial.class);		Bundle bundle=new Bundle();		bundle.putSerializable("goodInfo",info);		intent.putExtras(bundle);		startActivity(intent);	}	/**	 * 下拉刷新	 */	public void onRefresh() {		handler.postDelayed(new Runnable() {			public void run() {				switch (indexCount) {				case 0:					// quanBuDatas.add(quanBuDatas.size() + "下拉刷新,头部--全部");					// adapterQuanbu.notifyDataSetChanged();					break;				default:					// baopinDatas.add(baopinDatas.size() + "下拉刷新,头部--爆品");					// adapterBaopin.notifyDataSetChanged();					break;				}				onLoad();			}		}, 2000);	}	/**	 * 上拉刷新	 */	public void onLoadMore() {		handler.postDelayed(new Runnable() {			@Override			public void run() {				switch (indexCount) {				case QUANBU_VIEWPAGER:					quanbuIndex++;					getListViewDatas(quanbuIndex);					quanBuListView.setSelection(0);					break;									case BAOPIN_VIEWPAGER:					baopinIndex++;					getListViewDatas(baopinIndex);										break;				default:					// baopinDatas.add(baopinDatas.size() + "上拉刷新,底部--爆品");					// adapterBaopin.notifyDataSetChanged();					break;				}				onLoad();			}		}, 2000);	}	private void onLoad() {		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		switch (indexCount) {		case 0:			quanBuListView.stopRefresh();			quanBuListView.stopLoadMore();			quanBuListView.setRefreshTime(format.format(new Date()));			break;		default:			baoPinListView.stopRefresh();			baoPinListView.stopLoadMore();			baoPinListView.setRefreshTime(format.format(new Date()));			break;		}	}}
