package com.hkd.ithome.viewpager;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.Iterator;import me.maxwin.view.XListView;import me.maxwin.view.XListView.IXListViewListener;import com.example.ithome.R;import com.google.gson.Gson;import com.google.gson.JsonArray;import com.google.gson.JsonElement;import com.google.gson.JsonParser;import com.hkd.ithome.activities.WebviewActivity;import com.hkd.ithome.adapter.NewsAdapter;import com.hkd.ithome.app.AppApplication;import com.hkd.ithome.bean.NewsModel;import com.hkd.ithome.tools.NoChange;import com.lidroid.xutils.BitmapUtils;import com.lidroid.xutils.HttpUtils;import com.lidroid.xutils.ViewUtils;import com.lidroid.xutils.exception.HttpException;import com.lidroid.xutils.http.RequestParams;import com.lidroid.xutils.http.ResponseInfo;import com.lidroid.xutils.http.callback.RequestCallBack;import com.lidroid.xutils.http.client.HttpRequest.HttpMethod;import com.lidroid.xutils.view.annotation.ViewInject;import android.annotation.SuppressLint;import android.app.Activity;import android.content.Intent;import android.os.Bundle;import android.os.Handler;import android.support.v4.app.Fragment;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v4.view.ViewPager.OnPageChangeListener;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.view.animation.LinearInterpolator;import android.view.animation.RotateAnimation;import android.webkit.WebView;import android.widget.AdapterView;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.AdapterView.OnItemClickListener;import android.widget.Toast;public class viewPagerLastest extends Fragment implements IXListViewListener {	View v;	@ViewInject(R.id.xListView)	XListView xListView;	TextView headerText;	// 头部幻灯片	View headerNews, vpNewsOne, vpNewsTwo;	ArrayList<View> headerLists;	ViewPager vpHeader;	public static final int LOADMORE_OVER = 0;// 上拉加载下一页完成	public static final int REFISH_OVER = 1;// 下拉刷新完成	private boolean threadIsRun = false;	NewsAdapter newsAdapter;	ArrayList<NewsModel> newsDatas;	// 获取数据	HttpUtils http;	RelativeLayout lapinLoadingContent;// 加载动画页面	ImageView lapinLoadingImg;// 加载旋转动画图片	boolean isNextPage = false;// 是否加载下一页	BitmapUtils bitmapUtils;	@SuppressLint("ResourceAsColor")	@Override	public View onCreateView(LayoutInflater inflater, ViewGroup container,			Bundle savedInstanceState) {		// TODO Auto-generated method stub		v = inflater.inflate(R.layout.viewpager_lastest, null);		ViewUtils.inject(this, v);		xListView.setXListViewListener(this);		// 初始化加载动画		initRotateAnimation();		bitmapUtils = new BitmapUtils(getActivity());		headerNews = getActivity().getLayoutInflater().inflate(				R.layout.header_news, null);		headerText = (TextView) headerNews.findViewById(R.id.headerText);		vpHeader = (ViewPager) headerNews.findViewById(R.id.vpHeader);		vpNewsOne = getActivity().getLayoutInflater().inflate(				R.layout.viewpager_header_news_one, null);		vpNewsTwo = getActivity().getLayoutInflater().inflate(				R.layout.viewpager_header_news_two, null);		// vpNewsOne.findViewById(R.id.iv_listone).setBackgroundColor(R.color.black);		headerLists = new ArrayList<View>();		headerLists.add(vpNewsOne);		headerLists.add(vpNewsTwo);		vpHeader.setAdapter(HeaderNewsAdapter);		xListView.addHeaderView(headerNews);		// 添加数据		getDatas(false);		// 列表点击事件		xListView.setOnItemClickListener(new OnItemClickListener() {			@Override			public void onItemClick(AdapterView<?> arg0, View arg1, int arg2,					long arg3) {				// 头部和viewpager占用2个item，本应是arg2-2，而数据中跳过了前两个数据,因此又为arg2				if ((arg2) < newsDatas.size()) {// 防止点击『查看跟更多』时 数组越界					Intent intentToWebview = new Intent(getActivity(),							WebviewActivity.class);					intentToWebview.putExtra("link", newsDatas.get(arg2)							.getLink());					startActivity(intentToWebview);				} else {					getDatas(true);				}			}		});		return v;	}	public void getDatas(final boolean isNextPage) {		http = new HttpUtils();		String url = NoChange.WEB_SERVERS_ADDRESS + "/newsInfo_selectNews?";		NewsModel modle = new NewsModel();		// 获取当前资讯页viewpager的当前页码		int newspage = AppApplication.getApp().getNewspage();		System.out.println("newspage" + newspage);		if (newsDatas == null) {			newsDatas = new ArrayList<NewsModel>();		}		if (isNextPage == false) {// isNextPage为false时加载第一页			newsDatas.clear();			if (newspage % 2 == 1) {				modle.setPageIndex(1);				modle.setTypeId("2");			} else {				modle.setPageIndex(1);				modle.setTypeId("1");			}		} else {// isNextPage为true时加载第二页			if (newspage % 2 == 1) {				modle.setPageIndex(2);				modle.setTypeId("2");			} else {				modle.setPageIndex(2);				modle.setTypeId("1");			}		}		RequestParams params = new RequestParams();		String value = new Gson().toJson(modle);		params.addQueryStringParameter("params", value);		http.send(HttpMethod.POST, url, params, new RequestCallBack<String>() {			@Override			public void onSuccess(ResponseInfo<String> responseInfo) {				// 成功				if (responseInfo.result != null) {					Gson gson = new Gson();					JsonParser jsonParser = new JsonParser();					// 将json字符串转换成JsonElement					JsonElement jsonElement = jsonParser							.parse(responseInfo.result);					JsonArray jsonArray;					jsonArray = jsonElement.getAsJsonArray();					Iterator it = jsonArray.iterator();// Iterator处理					NewsModel newsModel;					while (it.hasNext()) { // 循环						jsonElement = (JsonElement) it.next();// 提取JsonElement						String json = jsonElement.toString();// JsonElement转换成String						newsModel = gson.fromJson(json, NewsModel.class);// String转化成JavaBean						newsDatas.add(newsModel);					}					if (isNextPage == false) {						newsAdapter = new NewsAdapter(getActivity(), newsDatas);						xListView.setAdapter(newsAdapter);					} else {						newsAdapter.UpdataAdapter(getActivity(), newsDatas);						xListView.setPullLoadEnable(false);// 底部查看更多消失						// Toast.makeText(getActivity(), "加载至最后一页",						// Toast.LENGTH_SHORT)						// .show();					}					xListView.setVisibility(View.VISIBLE);// 显示列表					lapinLoadingImg.clearAnimation();// 取消动画					lapinLoadingContent.setVisibility(View.INVISIBLE);// 隐藏动画					// 加载顶部幻灯片图片					bitmapUtils.display(							vpNewsOne.findViewById(R.id.iv_listone),							NoChange.WEB_SERVERS_ADDRESS									+ newsDatas.get(0).getImg());					bitmapUtils.display(							vpNewsTwo.findViewById(R.id.iv_listtwo),							NoChange.WEB_SERVERS_ADDRESS									+ newsDatas.get(1).getImg());					// 设置幻灯片描述文字					headerText.setText(newsDatas.get(0).getTitle());					// 设置幻灯片滑动时动态改变描述文字					vpHeader.setOnPageChangeListener(new OnPageChangeListener() {						@Override						public void onPageSelected(int arg0) {							// TODO Auto-generated method stub							if (arg0 == 1) {								headerText.setText(newsDatas.get(1).getTitle());							} else if (arg0 == 0) {								headerText.setText(newsDatas.get(0).getTitle());							}						}						@Override						public void onPageScrolled(int arg0, float arg1,								int arg2) {							// TODO Auto-generated method stub						}						@Override						public void onPageScrollStateChanged(int arg0) {							// TODO Auto-generated method stub						}					});				} else {					Toast.makeText(getActivity(), "暂无更新内容", Toast.LENGTH_SHORT)							.show();				}			}			@Override			public void onFailure(HttpException error, String msg) {				// TODO Auto-generated method stub				Toast.makeText(getActivity(), "网络不给力", Toast.LENGTH_SHORT)						.show();			}		});	}	@Override	public void onRefresh() {		System.out.println("-----onRefresh");		// 下拉执行		if (!threadIsRun) {			System.out.println("-----onLoadMore");			threadIsRun = true;			/*			 * 1.获取下一页数据 2.刷新适配器			 */			Thread t = new Thread(new Runnable() {				@Override				public void run() {					try {						Thread.sleep(2000);					} catch (InterruptedException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}					// mDatas.clear();					// addDatas();					handler.sendEmptyMessage(REFISH_OVER);				}			});			t.start();		}	}	@Override	public void onLoadMore() {		// 下拉执行		if (!threadIsRun) {			System.out.println("-----onLoadMore1");			threadIsRun = true;			/*			 * 1.获取下一页数据 2.刷新适配器			 */			Thread t = new Thread(new Runnable() {				@Override				public void run() {					try {						Thread.sleep(2000);					} catch (InterruptedException e) {						// TODO Auto-generated catch block						e.printStackTrace();					}					// mDatas.clear();					// addDatas();					handler.sendEmptyMessage(REFISH_OVER);				}			});			t.start();		}	}	Handler handler = new Handler() {		public void handleMessage(android.os.Message msg) {			switch (msg.what) {			case REFISH_OVER:			case LOADMORE_OVER:				threadIsRun = false;				// favoriteAdapter.notifyDataSetChanged();				xListView.stopLoadMore();				xListView.stopRefresh();				System.out.println("stop==========");				Date date = new Date();				DateFormat format = new SimpleDateFormat("HH:mm:ss");				String time = format.format(date);				xListView.setRefreshTime(time);				break;			default:				break;			}		};	};	// 顶部幻灯片适配器	PagerAdapter HeaderNewsAdapter = new PagerAdapter() {		@Override		public boolean isViewFromObject(View arg0, Object arg1) {			// TODO Auto-generated method stub			return arg0 == arg1;		}		@Override		public void destroyItem(ViewGroup container, int position, Object object) {			// TODO Auto-generated method stub			container.removeView(headerLists.get(position));		}		@Override		public Object instantiateItem(ViewGroup container, int position) {			// TODO Auto-generated method stub			View v = headerLists.get(position);			container.addView(v);			return v;		}		@Override		public int getCount() {			// TODO Auto-generated method stub			return headerLists.size();		}	};	/**	 * 加载动画的初始化	 */	public void initRotateAnimation() {		lapinLoadingContent = (RelativeLayout) v				.findViewById(R.id.lapin_loadingContent);		lapinLoadingImg = (ImageView) v				.findViewById(R.id.lapin_loadingContent_rotatingImg);		RotateAnimation rotateAnimation = (RotateAnimation) AnimationUtils				.loadAnimation(getActivity(), R.anim.rotating);		LinearInterpolator lin = new LinearInterpolator();// 设置为匀速转动		rotateAnimation.setInterpolator(lin);		lapinLoadingImg.startAnimation(rotateAnimation);	}}